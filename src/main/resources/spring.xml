<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-4.1.xsd
	">
	<!--spring是bean的容器（service+dao处理） 扫描 -->
	<context:component-scan base-package="com">
	<!-- 排除注解 -->
	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>
	<context:property-placeholder location="classpath:/jdbc.properties" />
	<!-- 所有数据库操作的源头实现子接口DataSource
		DriverManagerDataSource （请求产生一个连接 用完关闭 连接要重用 这样的机制叫连接池）
	-->
	<!-- 数据源只是为了获取连接池-->
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource">
		<property name="url" value="${url}"></property>
		<property name="username" value="${username1}"></property>
		<property name="password" value="${password2}"></property>
		<property name="driverClassName" value="${driverClass}"></property>
		<!-- 默认初始化的连接个数 -->
		<property name="initialSize" value="1"></property>
		<!--最大允许的连接个数 -->
		<property name="maxActive" value="200"></property>
		<!-- 最大的等待人数 -->
		<property name="maxIdle" value="100"></property>
		<!-- 监控sql 开启sql统计功能 -->
		<property name="filters" value="stat"></property>
	</bean>
	<!-- 通过spring集成mybatis  -->
	<!-- 配置session工厂 --> 
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入连接的数据源 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<bean id="sessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<!-- 构造器注入工厂 -->
		<constructor-arg index="0" ref="sqlSessionFactory"></constructor-arg>
	</bean>
	<!-- 扫描mybatis的接口映射 (*..* 任意多层次的包两个以上的包) -->
	<bean id="scannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.*..*.dao"></property>
	</bean>
	<!-- 事务管理器 -->
	<bean id="tm" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 提交连接事务 -->
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 所有的认证授权 需要securityManager -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myDbRealm"/> 
  	</bean>
  	<bean id="myFilter" class="com.et.conf.MyFilter"></bean>
	<!-- 后置处理器  负责销毁securityManager-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!-- shiro集成spring -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	    <property name="securityManager" ref="securityManager"/>
	    <!-- 没有登录的时 跳转到成功的页面-->
	    <property name="loginUrl" value="/login.html"/>
	    <!-- 授权  没有权限时跳转到该页面 -->
	    <property name="unauthorizedUrl" value="/fall.html"/>
	    <property name="filters">
	    	<util:map>
	    		<entry key="authc" value-ref="myFilter"></entry>
	    	</util:map>
	    </property>
	    <property name="filterChainDefinitions">
	        <value>
	        <!-- 引用MyFilter类首字母小写 -->
	        	/** = authc
	        </value>
	    </property>
	</bean>
	

	
</beans>